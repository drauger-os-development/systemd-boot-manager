#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  systemd-boot-manager
#
#  Copyright 2024 Thomas Castleman <batcastle@draugeros.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
"""Explain what this program does here!!!"""
from __future__ import print_function
import sys
import subprocess
import os
import json
import shlex
import systemd_boot_manager as sdbm


# Set up
UUID_FILE = sdbm.CONFIG_DIR + "/root_device.conf"
VERSION = "0.8.3-alpha8"
HELP = f"""systemd-boot-manager, Version: { VERSION }

        --apply-loader-config                            Apply loader.conf config

    -c, --check                                          Check systemd-boot-manager settings.

        --compat-mode=(enable|disable)                   Enable or disable compatibility mode. For stubborn UEFI
                                                         systems that refuse to recognize systemd-boot.

    -e, --enable                                         Enable systemd-boot-manager.

        --enforce-default-entry=(enable|disable)         Make sure the default boot entry is set correctly
                                                         at every boot. Pass nothing to check status.

        --editor=(enable|disable)                        Enable or disable boot menu entry editor. Pass
                                                         nothing to check status.

    -d, --default [bootloader entry]                     Set as default bootloader entry.

        --disable                                        Disable systemd-boot-manager.

        --dual-boot=(enable|disable)                     Enable or disable dual-boot support within systemd-boot.
                                                         Pass nothing to check status.

    -h, --help                                           Print this help dialog and exit.

        --key=(uuid|partuuid|label|path)                 Set or check key in use.

    -l, --list                                           List all bootloader entries.

    -r, --repair                                         Repair systemd-boot-manager settings and systemd-boot.

    -s, --show-settings                                  Show current settings.

    -t, --timeout [timeout in seconds]                   Set boot menu timeout in seconds.

    -u, --update                                         Update systemd-boot, default action.

    -v, --version                                        Print current version and exit.

    -V, --verbose                                        Print what is being done verbosely."""


if sys.version_info[0] == 2:
    sdbm.eprint(sdbm.ERROR + "Please run with Python 3 as Python 2 is End-of-Life." + sdbm.CLEAR)
    sys.exit(2)


def list_boot_entries(verbose):
    """Print a list of boot entries for the user"""
    entries = sdbm.get_boot_entries(verbose=verbose)
    print(sdbm.BLUE + "BOOT LOADER ENTRIES" + sdbm.CLEAR)
    print("-" * 20, "\n")
    for each in entries:
        print(f"\t-  { each }")
        print(f"\t\tID: { entries[each]['id'] }")
        print(f"\t\tDefault: { str(entries[each]['default']) }", '\n')


def enable(verbose):
    """Entry point to enable systemd-boot-manager"""
    if verbose:
        print("Checking for root...")
    if not sdbm.is_root():
        sdbm.eprint(sdbm.ERROR + "You need to be run this program as root to enable systemd-boot-manager." + sdbm.CLEAR)
        sys.exit(2)
    if verbose:
        print("Checking if already enabled")
    if not sdbm.is_enabled():
        if verbose:
            print("Enabling...")
        set_enabled()
        print(sdbm.SUCCESS + "systemd-boot-manager enabled!" + sdbm.CLEAR)
        sys.exit(0)
    else:
        print(sdbm.STATUS + "systemd-boot-manager already enabled." + sdbm.CLEAR)
        sys.exit(0)


def disable(verbose):
    """Entry point to disable systemd-boot-manager"""
    if verbose:
        print("Checking for root...")
    if not sdbm.is_root():
        sdbm.eprint(sdbm.ERROR + "You need to be run this program as root to disable systemd-boot-manager." + sdbm.CLEAR)
        sys.exit(2)
    if verbose:
        print("Checking if already disabled...")
    if not sdbm.is_enabled():
        sdbm.eprint(sdbm.STATUS + "systemd-boot-manager already disabled." + sdbm.CLEAR)
        sys.exit(0)
    else:
        if verbose:
            print("Disabling...")
        set_disabled()
        print(sdbm.SUCCESS + "systemd-boot-manager disabled!" + sdbm.CLEAR)
        sys.exit(0)


def enforce_default_entry_enabled(output="text"):
    """Check if enforcing the default boot entry is enabled

    if output == "bool", enforce_default_entry_enabled() will:
    return true if enabled
    return false if disabled.
    Otherwise, enforce_default_entry_enabled() returns "enabled" or "disabled"
    """
    try:
        status = subprocess.check_output(["systemctl", "status",
                                          "systemd-boot-manager"]).decode()
    except subprocess.CalledProcessError as e:
        status = e.stdout.decode()
    try:
        status = status.split("\n")[1].split("; ")[1]
    except IndexError:
        status = "disabled"
    if output == "bool":
        if status.lower() == "enabled":
            return True
        if status.lower() == "disabled":
            return False
    return status


def enforce_default_entry(arg, verbose):
    """enable or disable enforcing the default boot entry"""
    if verbose:
        print("Checking for root...")
    if not sdbm.is_root():
        sdbm.eprint(sdbm.ERROR + "You need to run this program as root to enable or disable boot entry enforcment." + sdbm.CLEAR)
        sys.exit(2)
    if verbose:
        print("Parsing command line argument...")
    setting = arg[24:].lower()
    if setting == "enable":
        if verbose:
            print("Checking if already enabled...")
        if enforce_default_entry_enabled(output="bool"):
            print(f"{ sdbm.STATUS }Default Entry Enforcement is already enabled!{ sdbm.CLEAR }")
            sys.exit(0)
        try:
            if verbose:
                print("Calling systemctl to enable...")
            subprocess.check_call(["systemctl", "enable", "systemd-boot-manager"])
        except subprocess.CalledProcessError:
            sdbm.eprint(sdbm.ERROR + "systemd has encountered an error." + sdbm.CLEAR)
            sys.exit(2)
        print(sdbm.SUCCESS + "Default Entry Enforcement has been ENABLED" + sdbm.CLEAR)
    elif setting == "disable":
        if verbose:
            print("Checking if already disable...")
        if not enforce_default_entry_enabled(output="bool"):
            print(f"{ sdbm.STATUS }Default Entry Enforcement is already disabled!{ sdbm.CLEAR }")
            sys.exit(0)
        try:
            if verbose:
                print("Calling systemctl to disable...")
            subprocess.check_call(["systemctl", "disable", "systemd-boot-manager"])
        except subprocess.CalledProcessError:
            sdbm.eprint(sdbm.ERROR + "systemd has encountered an error." + sdbm.CLEAR)
            sys.exit(2)
        print(sdbm.SUCCESS + "Default Entry Enforcement has been DISABLED" + sdbm.CLEAR)
    elif setting == "":
        if verbose:
            print("Checking status...")
        status = enforce_default_entry_enabled()
        print(sdbm.STATUS + f"Default Entry Enforcement is: { status.upper() }" + sdbm.CLEAR)
    else:
        sdbm.eprint(f"{sdbm.ERROR}Invalid option given. Option must be either `enable' or `disable'.{sdbm.CLEAR}")


def dual_boot(arg, verbose):
    """Report or update dual-boot setting"""
    settings = sdbm.get_settings(verbose)
    if arg == "":
        if settings["dual-boot"] is True:
            print(sdbm.SUCCESS + "Dual-boot Support is Enabled." + sdbm.CLEAR)
        else:
            print(sdbm.STATUS + "Dual-boot Support is Disabled." + sdbm.CLEAR)
        return
    arg = arg.lower()
    if arg == "enable":
        if settings["dual-boot"] is True:
            print(sdbm.SUCCESS + "Dual-boot Support is already Enabled." + sdbm.CLEAR)
        else:
            settings["dual-boot"] = True
            with open("/etc/systemd-boot-manager/general.json", "w") as file:
                json.dump(settings, file, indent=2)
            print(sdbm.SUCCESS + "Dual-boot Support is Enabled." + sdbm.CLEAR)
    elif arg == "disable":
        # we do this because the ONLY time we want dual-boot to be enabled is when dual-boot
        # is True. Any other time, we default to False.
        if settings["dual-boot"] is not True:
            print(sdbm.STATUS + "Dual-boot Support is already Disabled." + sdbm.CLEAR)
        else:
            settings["dual-boot"] = False
            with open("/etc/systemd-boot-manager/general.json", "w") as file:
                json.dump(settings, file, indent=2)
            print(sdbm.STATUS + "Dual-boot Support is Disabled." + sdbm.CLEAR)
    else:
        sdbm.eprint(sdbm.ERROR + f"'{arg}' not understood. Please use either 'enable' or 'disable'.")
        sys.exit(1)


def update(verbose):
    """Trigger systemd-boot update"""
    command = ["/etc/kernel/postinst.d/zz-update-systemd-boot", "-"]
    if verbose:
        command.insert(1, "-v")
    if not sdbm.is_root():
        sdbm.eprint(sdbm.ERROR + "You need to be run this program as root to update systemd-boot." + sdbm.CLEAR)
        sys.exit(2)
    try:
        subprocess.check_call(command)
    except subprocess.CalledProcessError as err:
        sys.exit(err.returncode)


def get_settings(verbose):
    """Get current settings"""
    conf = {"KEY": None, "DEFAULT_ENTRY": None}
    if sdbm.check_default_entry(verbose=verbose):
        conf["DEFAULT_ENTRY"] = sdbm.get_default_boot_entry(verbose)
    else:
        raise ValueError("Settings corrupted! Repair recommended!")
    with open("../../etc/systemd-boot-manager/general.json") as file:
        settings = json.load(file)
    conf["KEY"] = settings["key"].upper()
    conf[settings["key"].upper()] = sdbm.get_key(sdbm.get_root_partition(verbose),
                                                 key_type=conf["KEY"])
    return conf


def show_settings(verbose):
    """Print current settings"""
    print(sdbm.GREEN + "CURRENT SETTINGS" + sdbm.CLEAR)
    print("-" * 20, "\n")
    try:
        settings = get_settings(verbose)
    except ValueError:
        print(f"{ sdbm.ERROR }SETTINGS LIKELY CORRUPTED!{ sdbm.CLEAR }")
        print(f"{ sdbm.ERROR }REPAIR THIS ISSUE USING THE -r FLAG!{ sdbm.CLEAR }")
        sys.exit(2)
    print(sdbm.BLUE + "DEFAULT BOOT ENTRY:\t\t" + sdbm.CLEAR + settings["DEFAULT_ENTRY"])
    devices = sdbm.get_devices()
    for each in devices:
        if each["partuuid"] == settings[settings["KEY"]]:
            print(sdbm.BLUE + "ROOT PARTITION:\t\t\t" + sdbm.CLEAR + each["path"])
            break
    print(f"{ sdbm.BLUE }DEFAULT ENTRY ENFORCEMENT:\t{ sdbm.CLEAR }{ enforce_default_entry_enabled() }")
    print(f"{ sdbm.BLUE }BOOT MENU EDITOR:\t\t{ sdbm.CLEAR }{ get_editor() }")
    if not os.path.exists(sdbm.ROOT_DEVICE_FILE):
        print(f"{ sdbm.WARNING }You are using the old settings format.{ sdbm.CLEAR }")
        print(f"{ sdbm.WARNING }This format is depricated.{ sdbm.CLEAR }")
        print(f"{ sdbm.WARNING }In order to switch to the new settings format and{ sdbm.CLEAR }")
        print(f"{ sdbm.WARNING }unlock certain new settings run: `sudo systemd-boot-manager -r`{ sdbm.CLEAR }")
    else:
        print(f"{ sdbm.BLUE }KEY TYPE:\t\t\t{ sdbm.CLEAR }{ settings['KEY'] }")


def get_editor(output="text", verbose=False):
    """Get bootloader menu editor setting"""
    if verbose:
        print("Reading and parsing loader config...")
    with open(sdbm.CONFIG_DIR + "/loader.conf", "r") as file:
        contents = file.read().split("\n")
    for each in range(len(contents) - 1, -1, -1):
        if "editor" in contents[each]:
            contents = contents[each]
            break
    if verbose:
        print("Got editor line. Performing `shelx.split()`...")
    contents = shlex.split(contents)
    if verbose:
        print("Type casting per request...")
    if contents[1] == "1":
        if output == "bool":
            return True
        return "enabled"
    if output == "bool":
        return False
    return "disabled"


def set_editor(enable="enable", verbose=False):
    """Enable/Disable bootloader menu editor"""
    if enable.lower() not in ("enable", "disable", ""):
        sdbm.eprint(f"{sdbm.ERROR} {enable}: not a valid option. Must be either 'enable' or 'disable'")
        sys.exit(2)
    if verbose:
        print("Read config file...")
    with open(sdbm.CONFIG_DIR + "/loader.conf", "r") as file:
        contents = file.read().split("\n")
    if verbose:
        print("Parse config file...")
    for each in range(len(contents) - 1, -1, -1):
        contents[each] = shlex.split(contents[each])
    if verbose:
        print("Modifying config...")
    for each in range(len(contents) - 1, -1, -1):
        if len(contents[each]) > 0:
            if contents[each][0] == "editor":
                if enable.lower() == "enable":
                    if contents[each][1] == "1":
                        print(f"{ sdbm.STATUS } EDITOR ALREADY ENABLED { sdbm.CLEAR }")
                        sys.exit(0)
                    contents[each][1] = "1"
                elif enable.lower() == "disable":
                    if contents[each][1] == "0":
                        print(f"{ sdbm.STATUS } EDITOR ALREADY DISABLED { sdbm.CLEAR }")
                        sys.exit(0)
                    contents[each][1] = "0"
                elif enable.lower() == "":
                    print(f"{ sdbm.STATUS } EDITOR { get_editor().upper() } { sdbm.CLEAR }")
                    sys.exit(0)
                break
        else:
            del contents[each]
    if verbose:
        print("Reconstructing and overwriting config file...")
    for each in range(len(contents) - 1, -1, -1):
        contents[each] = " ".join(contents[each])
    with open(sdbm.CONFIG_DIR + "/loader.conf", "w") as file:
        file.write("\n".join(contents))
    print(f"{sdbm.SUCCESS} EDITOR SUCCESSFULLY {enable.upper()}D {sdbm.CLEAR}")
    print(f"{sdbm.NAME}\t Run: `sudo systemd-boot-manager --apply-loader-config' to apply config.")


def set_timeout(timeout="5", verbose=False):
    """Set bootloader menu timeout"""
    if not timeout.isnumeric():
        sdbm.eprint(f"{sdbm.ERROR} {timeout}: not a positive integer.")
        sys.exit(2)
    if int(timeout) < 0:
        sdbm.eprint(f"{sdbm.ERROR} {timeout}: not a positive integer.")
        sys.exit(2)
    if verbose:
        print("Read config file...")
    with open(sdbm.CONFIG_DIR + "/loader.conf", "r") as file:
        contents = file.read().split("\n")
    if verbose:
        print("Parse config file...")
    for each in range(len(contents) - 1, -1, -1):
        contents[each] = shlex.split(contents[each])
    if verbose:
        print("Modifying config...")
    for each in range(len(contents) - 1, -1, -1):
        if len(contents[each]) > 0:
            if contents[each][0] == "timeout":
                contents[each][1] = timeout
                break
        else:
            del contents[each]
    if verbose:
        print("Reconstructing and overwriting config file...")
    for each in range(len(contents) - 1, -1, -1):
        contents[each] = " ".join(contents[each])
    with open(sdbm.CONFIG_DIR + "/loader.conf", "w") as file:
        file.write("\n".join(contents))
    print(f"{ sdbm.SUCCESS } TIMEOUT SUCCESSFULLY CONFIGURED { sdbm.CLEAR }")
    print(f"{ sdbm.NAME }\tRun: `sudo systemd-boot-manager --apply-loader-config' to apply config.{ sdbm.CLEAR }")


def apply_loader(verbose=False):
    """Apply Loader config"""
    if verbose:
        print("Removing old loader config file...")
    try:
        os.remove("/boot/efi/loader/loader.conf")
    except FileNotFoundError:
        if verbose:
            print("File already missing. Continuing...")
    sdbm.check_loader(verbose=verbose)
    print(f"{ sdbm.SUCCESS }LOADER CONFIG SUCCESSFULLY APPLIED!{ sdbm.CLEAR }")


def check(verbose):
    """Check systemd-boot-manager settings"""
    print(sdbm.BLUE + "RUNNING CONFIGURATION CHECKS" + sdbm.CLEAR)
    print("-" * 20, "\n")
    if not sdbm.is_enabled():
        sdbm.eprint(f"{ sdbm.WARNING }systemd-boot-manager is not enabled. Not checking settings.{ sdbm.CLEAR }")
        sdbm.eprint(f"{ sdbm.NAME }To enable systemd-boot-manager, run `sudo systemd-boot-manager --enable`{ sdbm.CLEAR }")
        sys.exit(1)
        # print warning and exit
    settings = sdbm.get_settings(verbose)
    if ["no-var"] is True:
        sdbm.eprint(f"{ sdbm.WARNING }EFI variables are disabled.{ sdbm.CLEAR }")
    if verbose:
        print("Checking if using new or old settings format...")
    if os.path.exists(f"{ sdbm.CONFIG_DIR }/root_device.conf"):
        if verbose:
            print("Detected new settings format.")
        # compare to root partition in lsblk and indicated in loader.conf
        # initialize our report to the user
        report = {"KEYS": False, "DEFAULT BOOTLOADER ENTRY": None}
        # set up key storage
        keys = {"KEY": settings["key"],
                "root_part": sdbm.get_root_partition(verbose)}
        # get our key
        keys[keys["KEY"]] = sdbm.get_key(keys["root_part"], keys["KEY"],
                                         verbose=verbose)
        # check if default bootloader is being honored
        if os.path.isfile(sdbm.DEFAULTS_FILE):
            report["DEFAULT BOOTLOADER ENTRY"] = sdbm.check_default_entry(verbose=verbose)
        # get key for root parition
        try:
            with open(f"/boot/efi/loader/entries/{ sdbm.DISTRO }.conf", "r") as file:
                output = file.read().split("\n")
            for each in output:
                if "options" in each:
                    output = each
                    break
            output = output.split(" ")
            for each in output:
                if "root" in each:
                    output = each
                    break
            output = output.split("=")[-1]
        except FileNotFoundError:
            # try to ensure a "False" outcome on the next command
            output = None
        # compare to expected key
        report["KEYS"] = (output == keys[keys["KEY"]])
    else:
        if verbose:
            print("Assuming old settings format.")
        # do the old method of checking the UUID here
        # initialize our report to the user
        report = {"PARTUUID": False, "DEFAULT BOOTLOADER ENTRY": None}
        if os.path.isfile(sdbm.UUID_FILE):
            report["PARTUUID"] = sdbm.check_uuid(verbose=verbose)
        if os.path.isfile(sdbm.DEFAULTS_FILE):
            report["DEFAULT BOOTLOADER ENTRY"] = sdbm.check_default_entry(verbose=verbose)
    # figure out formatting
    length = 0
    for each in report:
        if len(each) > length:
            length = len(each)
    length += 8
    errors = 0
    for each in report:
        output_length = length - len(each)
        print(f"{ sdbm.BLUE }{ each }:{ sdbm.CLEAR }{ ' ' * output_length }", end = "")
        if report[each] is True:
            print(f"{ sdbm.GREEN }GOOD{ sdbm.CLEAR }")
        elif report[each] is False:
            errors += 1
            print(f"{ sdbm.RED }MISMATCH{ sdbm.CLEAR }")
        else:
            print(f"{ sdbm.YELLOW }N/A{ sdbm.CLEAR }")
    if "KEY" in report:
        label = "KEY TYPE"
        output_length = length - len(label)
        print(f"{ sdbm.BLUE }{ label }:{ ' ' * output_length }{ keys['KEY'] }")
    if errors != 0:
        sdbm.eprint(sdbm.RED + "\nTHERE ARE ERRORS!\n" + sdbm.CLEAR)
        sdbm.eprint("We suggest running `sudo systemd-boot-manager --repair' to fix these issues.")
        sys.exit(1)


def repair(verbose):
    """Repair systemd-boot-manager and systemd-boot settings"""
    if not sdbm.is_root():
        sdbm.eprint(sdbm.ERROR + "You need to run this program as root to repair your settings." + sdbm.CLEAR)
        sys.exit(2)
    print(sdbm.BLUE + "INITIATING CONFIGURATION REPAIR" + sdbm.CLEAR)
    print("-" * 20, "\n")
    # Get UUID
    print(sdbm.BLUE + "GETTING APPRORIATE SETTINGS" + sdbm.CLEAR)
    path = sdbm.get_root_partition(verbose)
    # Get default entry
    default_entry = sdbm.get_default_boot_entry(verbose)
    # Make them permanent
    print(sdbm.BLUE + "WRITING SETTINGS TO DISK" + sdbm.CLEAR)
    generate_settings(path, default_entry=default_entry, verbose=verbose)
    sdbm.check_loader(verbose=verbose)
    if not os.path.exists("".join(sdbm.CONF_FILE)):
        settings = sdbm.get_settings(verbose)
        sdbm.generate_loader_entry(settings["standard_boot_args"],
                                   sdbm.get_root_pointer(verbose))
        sdbm.generate_recovery_loader_entry(settings["standard_boot_args"],
                                            sdbm.get_root_pointer(verbose))
    print("\n")
    check(verbose)


def generate_settings(path, default_entry=None, verbose=False):
    """Generate settings based off the current system,
    Or, passed settings
    """
    try:
        if verbose:
            print("Writing root partition to " + sdbm.ROOT_DEVICE_FILE + " . . .")
        with open(sdbm.ROOT_DEVICE_FILE, "w") as conf:
            conf.write(path)
    except (FileNotFoundError, PermissionError):
        sdbm.eprint(sdbm.ERROR + "An Unwarrented error has occured. Please try again later." + sdbm.CLEAR)
        sys.exit(2)
    sdbm.update_defaults_file(default_entry, verbose=verbose)



def key_handler(arg, verbose):
    """Set or check keys"""
    # handle key settings
    settings = sdbm.get_settings(verbose=verbose)
    if arg == "":
        print(f"{ sdbm.BLUE }KEY TYPE: { sdbm.CLEAR }{ settings['key'] }")
        sys.exit(0)
    if arg.lower() not in ("uuid", "partuuid", "label", "path"):
        sdbm.eprint(f"{ sdbm.ERROR }{ arg }: not a valid key type. Must be one of 'uuid', 'partuuid', 'label', or 'path'")
        sys.exit(2)
    sdbm.set_settings("key", arg, verbose=verbose)
    print(f"{ sdbm.SUCCESS }Key Type changed to: { arg.upper() }")
    print(f"{ sdbm.NAME }\tYou might want to run `sudo systemd-boot-manager -u` to update your bootloader")


def set_enabled():
    """Set systemd-boot-manager as enabled"""
    with open(f"{ sdbm.CONFIG_DIR }/enabled.conf", "w") as file:
        file.write("enabled")


def set_disabled():
    """Set systemd-boot-manager as disabled"""
    with open(f"{ sdbm.CONFIG_DIR }/enabled.conf", "w") as file:
        file.write("")


def compatibility_mode_controls(arg, verbose):
    """Get/Set compatibility mode state"""
    settings = sdbm.get_settings(verbose=verbose)
    with open(f"{sdbm.CONFIG_DIR}/general.json", "r") as file:
        settings_file = file.read()
    if arg == "":
        if "compat_mode" in settings_file and isinstance(settings["compat_mode"],
                                                         bool):
            if settings["compat_mode"]:
                print(sdbm.SUCCESS + "Compatibility Mode is Enabled." + sdbm.CLEAR)
            else:
                print(sdbm.STATUS + "Compatibility Mode is Disabled." + sdbm.CLEAR)
        else:
            sdbm.eprint(sdbm.WARNING + "Compatibility Mode not properly set." + sdbm.CLEAR)
            answer = input("Would you like to set Compatibility Mode now and hide this warning in the future? [Y/n]: ").lower()
            if answer in ("y", "yes", "sure", "ok", "okay"):
                while True:
                    answer = input("Would you like to set Compatibility Mode to Enabled or Disabled? [ENABLE/disable]: ").lower()
                    if answer in ("enabled", "e", "on", "enable"):
                        sdbm.set_settings("compat_mode", True, verbose)
                        print(sdbm.SUCCESS + "Compatibility Mode is Enabled." + sdbm.CLEAR)
                        break
                    elif answer in ("disabled", "d", "off", "disable"):
                        sdbm.set_settings("compat_mode", False, verbose)
                        print(sdbm.SUCCESS + "Compatibility Mode is Disabled." + sdbm.CLEAR)
                        break
                    else:
                        sdbm.eprint(sdbm.ERROR + f"'{answer}' is not an acceptable response." + sdbm.CLEAR)
            else:
                if settings["compat_mode"]:
                    print(sdbm.STATUS + "Compatibility Mode is Behaving as: Enabled." + sdbm.CLEAR)
                else:
                    print(sdbm.STATUS + "Compatibility Mode is Behaving as: Disabled." + sdbm.CLEAR)
        return
    arg = arg.lower()
    sdbm.set_settings("compat_mode", arg, verbose)
    if arg in ("1", "True", "enable", "on", "enabled", True):
        print(sdbm.SUCCESS + "Compatibility Mode is Enabled." + sdbm.CLEAR)
    else:
        print(sdbm.SUCCESS + "Compatibility Mode is Disabled." + sdbm.CLEAR)




# Handle flags on command line
# get length of argv
ARGC = len(sys.argv)
VERBOSE = False
POINT = 1
if "update-systemd-boot" in sys.argv[0]:
    HELP = f"""update-systemd-boot, Version: { VERSION }

Update systemd-boot and available kernel stubs

-h, --help       Print this help dialog and exit
-v, --verbose    Print what is being done verbosely
-V, --version    Print systemd-boot-manager version

Pass nothing to trigger an update."""
    if ARGC >= 2:
        if ((sys.argv[1].lower() == "--verbose") or (sys.argv[1] == "-v")):
            update(True)
        elif sys.argv[1].lower() in ("-h", "--help"):
            print(HELP)
        elif ((sys.argv[1].lower() == "--version") or (sys.argv[1] == "-V")):
            print(VERSION)
        else:
            print(HELP)
            sys.exit(1)
    else:
        update(False)
else:
    if ARGC >= 2:
    # check for verbose flag first
        for each in enumerate(sys.argv):
            if sys.argv[each[0]] in ("-v", "--verbose"):
                VERBOSE = True
                POINT = each[0]
                break
        if POINT == 1 and VERBOSE:
            POINT = 2
        else:
            POINT = 1
        # in case we are ONLY passed a -v/--verbose flag
        if ((ARGC == 2) and VERBOSE):
            sdbm.eprint(f"{ sdbm.ERROR }Plain verbose flag passed. Did you mean to call `sudo update-systemd-boot -v`?")
            sys.exit(1)
        if sys.argv[POINT] in ("-h", "--help"):
            print(HELP)
        elif sys.argv[POINT] in ("-V", "--version"):
            print(VERSION)
        elif sys.argv[POINT] in ("-u", "--update"):
            update(VERBOSE)
        elif sys.argv[POINT] in ("-c", "--check"):
            check(VERBOSE)
        elif sys.argv[POINT] in ("-r", "--repair"):
            repair(VERBOSE)
        elif sys.argv[POINT] in ("-s", "--show-settings"):
            show_settings(VERBOSE)
        elif sys.argv[POINT] in ("-l", "--list"):
            list_boot_entries(VERBOSE)
        elif sys.argv[POINT] in ("-d", "--default"):
            if len(sys.argv) < 3:
                print(f"{ sdbm.STATUS }Default boot entry is: { sdbm.get_default_boot_entry(VERBOSE) }")
                sys.exit(0)
            sdbm.set_as_default_entry(sys.argv[POINT + 1])
        elif sys.argv[POINT] in ("-e", "--enable"):
            enable(VERBOSE)
        elif sys.argv[POINT] == "--disable":
            disable(VERBOSE)
        elif "--enforce-default-entry" in sys.argv[POINT]:
            enforce_default_entry(sys.argv[POINT], VERBOSE)
        elif sys.argv[POINT] in ("-t", "--timeout"):
            if not sdbm.is_root():
                sdbm.eprint(sdbm.ERROR + "You need to run this program as root to change settings." + sdbm.CLEAR)
                sys.exit(2)
            if (len(sys.argv) - 1) > (POINT + 1):
                sdbm.eprint(f"{sdbm.ERROR}No option given. Option must be a positive integer.{sdbm.CLEAR}")
            set_timeout(timeout=sys.argv[POINT + 1], verbose=VERBOSE)
        elif sys.argv[POINT] == "--apply-loader-config":
            if not sdbm.is_root():
                sdbm.eprint(sdbm.ERROR + "You need to run this program as root to change settings." + sdbm.CLEAR)
                sys.exit(2)
            apply_loader(verbose=VERBOSE)
        elif "--editor" in sys.argv[POINT]:
            if not sdbm.is_root():
                sdbm.eprint(sdbm.ERROR + "You need to run this program as root to change settings." + sdbm.CLEAR)
                sys.exit(2)
            setting = sys.argv[POINT][9:].lower()
            set_editor(enable=setting, verbose=VERBOSE)
        elif "--dual-boot" in sys.argv[POINT]:
            arg = sys.argv[POINT][12:]
            dual_boot(arg, VERBOSE)
        elif "--key" in sys.argv[POINT]:
            arg = sys.argv[POINT][6:]
            key_handler(arg, VERBOSE)
        elif "--compat-mode" in sys.argv[POINT]:
            arg = sys.argv[POINT][14:]
            compatibility_mode_controls(arg, VERBOSE)
        else:
            sdbm.eprint(sdbm.ERROR + "Flag: " + sys.argv[1] + " Not understood." + sdbm.CLEAR)
            print(HELP)
            sys.exit(1)
    else:
        print(HELP)
